# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd failed with 9 errors.
# Compile of VendingMachineV2.vhd failed with 38 errors.
# Compile of VendingMachineV2.vhd failed with 14 errors.
# Compile of VendingMachineV2.vhd failed with 7 errors.
# Compile of VendingMachineV2.vhd failed with 6 errors.
# Compile of VendingMachineV2.vhd failed with 6 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
library IEEE;
# bad option "IEEE": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
use IEEE.STD_LOGIC_1164.ALL;
# invalid command name "use"
use IEEE.std_logic_unsigned.all;
# invalid command name "use"

-- Uncomment the following library declaration if using
# invalid command name "--"
-- arithmetic functions with Signed or Unsigned values
# invalid command name "--"
--use IEEE.NUMERIC_STD.ALL;
# invalid command name "--use"

-- Uncomment the following library declaration if instantiating
# invalid command name "--"
-- any Xilinx leaf cells in this code.
# invalid command name "--"
--library UNISIM;
# invalid command name "--library"
--use UNISIM.VComponents.all;
# invalid command name "--use"

entity VendingM is
# bad option "VendingM": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
port ( Clock, Reset: in std_logic;
# invalid command name "port"
       euroIn, twentyCent, tee, coffee: in std_logic;
# invalid command name "euroIn,"
       An0,Display: out STD_LOGIC_VECTOR(7 downto 0);
# invalid command name "An0,Display:"
       LED_s20, LED_s40: out std_logic
# invalid command name "LED_s20,"
);
# invalid command name ")"
end entity;
# bad option "entity": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write

architecture DrinksVending_arch of VendingM is
# bad option "DrinksVending_arch": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
type states is (idle, s20, s40);
# The system cannot find the file specified.
# Error occurred while processing: states.
# The system cannot find the file specified.
# Error occurred while processing: is.
# The system cannot find the file specified.
# Error occurred while processing: (idle.
# The system cannot find the file specified.
# Error occurred while processing: s20.
# The system cannot find the file specified.
# Error occurred while processing: s40).
signal currentState, nextState: states;
# invalid command name "signal"
	signal Refresh_counter: STD_LOGIC_VECTOR( 19 downto 0);
# invalid command name "signal"
	signal Led_activation: STD_LOGIC_VECTOR(2 downto 0);
# invalid command name "signal"
	signal DataDisp,sw1: STD_LOGIC_VECTOR(3 downto 0);
# invalid command name "signal"
	signal Disp: STD_LOGIC_VECTOR(7 downto 0);
# invalid command name "signal"
	signal sw0: STD_LOGIC_VECTOR(1 downto 0);
# invalid command name "signal"
	signal drinksChoice: std_logic_vector ( 1 downto 0);
# invalid command name "signal"
	signal balance, returnAmount: std_logic_vector( 3 downto 0);
# invalid command name "signal"
        signal DispenseD : std_logic;
# invalid command name "signal"
	signal secDealy: integer range 0 to 50000000;
# invalid command name "signal"
begin
# invalid command name "begin"

----------------------------------------------
# invalid command name "----------------------------------------------"

--Process 1: for storing
# invalid command name "--Process"

State_Memory_Process: process (Clock, Reset)
# invalid command name "State_Memory_Process:"
begin
# invalid command name "begin"

	if( Reset = '1') then
# invalid command name "if("
		currentState <= idle;
# invalid command name "currentState"
	elsif (rising_edge(Clock)) then
# invalid command name "elsif"
		if secDealy = 50000000 then
# invalid bareword "secDealy"
# in expression "secDealy";
# should be "$secDealy" or "{secDealy}" or "secDealy(...)" or ...
   --  elsif (Clock'event and Clock ='1') then
# invalid command name "--"
			currentState <= nextState;
# invalid command name "currentState"
		end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
	end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
end process;
# bad option "process": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write

----------------------------------------------
# invalid command name "----------------------------------------------"

--Process 2: for logic
# invalid command name "--Process"

Next_State_Process: process (currentState, twentyCent, euroIn, tee, coffee)
# invalid command name "Next_State_Process:"
--( currentState, euroIn, twentyCent, tee, coffee)
# invalid command name "--("

begin
# invalid command name "begin"

	case (currentState) is
# extra case pattern with no body

  		 when idle => if ( twentyCent = '1' and euroIn= '0') then
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			                 nextState <= s20;    
# invalid command name "nextState"
			                 
			          --       LED_s40 <= '0';                                                                                                 
# invalid command name "--"
			        elsif (twentyCent = '0' and euroIn = '1' )then
# invalid command name "elsif"
			              nextState <= idle;
# invalid command name "nextState"
			         --     LED_s20 <= '0'; 
# invalid command name "--"
			         --     LED_s40 <= '0';
# invalid command name "--"
			       elsif (twentyCent = '0' and euroIn = '0') then
# invalid command name "elsif"
					nextState <= idle;
# invalid command name "nextState"
				  else
# invalid command name "else"
					nextState <= idle;
# invalid command name "nextState"
                      end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write

   		 when s20 => if ( twentyCent = '1') then --and tee= '1' and coffee= '0') then		
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
                            nextState <= s40;
# invalid command name "nextState"
                     --       LED_s40 <= '1'; 
# invalid command name "--"
                     --       LED_s20 <= '0'; 
# invalid command name "--"
           --          elsif ( twentyCent = '0'and tee= '0' and coffee= '1') then		--  it was( twentyCent = '1'and tee= '0' and coffee= '1')
# invalid command name "--"
             --               nextState <= s40;
# invalid command name "--"
                     else
# invalid command name "else"
                            nextState <= s20;
# invalid command name "nextState"
                     end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write

   		 when s40 => if ( twentyCent = '1' ) then --and coffee = '1' and tee = '0') then
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
                           nextState <= idle;
# invalid command name "nextState"
                      -- elsif(twentyCent = '0') then -- and coffee = '0' and tee ='1') then
# invalid command name "--"
                       --    nextState <= idle;
# invalid command name "--"
		     else
# invalid command name "else"
			         nextState <= s40;
# invalid command name "nextState"
                     end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
	     when others => nextState <= idle;
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.

    end case;
# bad option "case": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
end process;
# bad option "process": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
-----------------------------------------------
# invalid command name "-----------------------------------------------"

--Process 3: output results
# invalid command name "--Process"

Output_Process: process ( currentState, euroIn, twentyCent, tee, coffee)
# invalid command name "Output_Process:"

begin
# invalid command name "begin"

	case (currentState) is
# extra case pattern with no body

  		 when idle => if ( euroIn = '1' and tee= '1' and coffee ='0') then ----- the chosen drink is tee for 40 cents
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
                DispenseD <= '1'; 
# invalid command name "DispenseD"
			   	balance <= "0001" ;
# invalid command name "balance"
				returnAmount <= "0110";   
# invalid command name "returnAmount"
				drinksChoice <= "10";  -- 01 represents tee used in display reasons
# invalid command name "drinksChoice"

               
                elsif ( euroIn = '1' and tee= '0' and coffee ='1') then ----- the chosen drink is coffee for 60 cent
# invalid command name "elsif"
                DispenseD <= '1'; 
# invalid command name "DispenseD"
			   	balance <= "0001" ;
# invalid command name "balance"
				returnAmount <= "0100";   
# invalid command name "returnAmount"
				drinksChoice <= "01"; -- 10 represents tee used iin display reasons
# invalid command name "drinksChoice"
 
   			    elsif ( euroIn = '1' and tee= '1' and coffee ='1') then ----- the chosen drink are  coffee for 60 cent and tee for 40 cent
# invalid command name "elsif"
			   	DispenseD <= '1'; 
# invalid command name "DispenseD"
			   	balance <= "0001" ;
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "11"; -- 11 represents tee + coffee used iin display reasons
# invalid command name "drinksChoice"
				
                else
# invalid command name "else"
			   	DispenseD <= '0'; 
# invalid command name "DispenseD"
			   	balance <= "0000" ;
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "00"; -- 00 represent no drinks used iin display reasons
# invalid command name "drinksChoice"
                end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
                LED_s40 <= '0'; 
# invalid command name "LED_s40"
                LED_s20 <= '0'; 
# invalid command name "LED_s20"
   		 when s20 => if (tee = '1' and coffee= '0') then
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
   		        DispenseD <= '0'; 
# invalid command name "DispenseD"
			   	balance <= "0010" ;
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "10"; -- 00 represent no drinks used iin display reasons
# invalid command name "drinksChoice"
				elsif ( tee ='0' and coffee= '1') then
# invalid command name "elsif"
				DispenseD <= '0'; 
# invalid command name "DispenseD"
			   	balance <= "0010" ;
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "01"; -- 00 represent no drinks used iin display reasons
# invalid command name "drinksChoice"
				else
# invalid command name "else"
				DispenseD <= '0'; 
# invalid command name "DispenseD"
			   	balance <= "0010" ;
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "00"; -- 00 represent no drinks used iin display reasons
# invalid command name "drinksChoice"
			    end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
			    LED_s20 <= '1'; 
# invalid command name "LED_s20"
                
   		 when s40 => if  ( tee = '1' and coffee = '0') then --(twentyCent = '0' and tee = '1' and coffee = '0') then --- have 40 cents in balance and asked for tee as a drink
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
                DispenseD <= '1'; 
# invalid command name "DispenseD"
			   	balance <= "0100" ; -- 40 cents
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "10";
# invalid command name "drinksChoice"
			    elsif  ( tee = '0' and coffee = '1') then --(twentyCent = '0' and tee = '1' and coffee = '0') then --- have 40 cents in balance and asked for tee as a drink
# invalid command name "elsif"
                		DispenseD <= '0'; 
# invalid command name "DispenseD"
			   	balance <= "0100" ; -- 40 cents
# invalid command name "balance"
				returnAmount <= "0000";   
# invalid command name "returnAmount"
				drinksChoice <= "01";
# invalid command name "drinksChoice"
				
				
                --elsif ( tee = '0' and coffee = '1' ) then -- (twentyCent = '1'  and tee = '0' and coffee = '1') then --- paid the exact price amount of coffee 
# invalid command name "--elsif"
    --            DispenseD <= '1'; 
# invalid command name "--"
			   --	balance <= "0110" ; -- 60 cents balance
# invalid command name "--"
	--			returnAmount <= "0000";   
# invalid command name "--"
	--			drinksChoice <= "01";
# invalid command name "--"
				
		elsif ( twentyCent = '1' and tee = '1' and coffee = '0') then --- have 40 cents in balance and asked for tee as a drink
# invalid command name "elsif"
                DispenseD <= '1'; 
# invalid command name "DispenseD"
			   	balance <= "0100" ; -- 40 cents
# invalid command name "balance"
				returnAmount <= "0010";   
# invalid command name "returnAmount"
		    		drinksChoice <= "10";                 --changing to check the 20 cents output on fpga
# invalid command name "drinksChoice"
				
               else 
# invalid command name "else"
                DispenseD <= '0'; 
# invalid command name "DispenseD"
	   	    	balance <= "0100" ;
# invalid command name "balance"
	   			returnAmount <= "0000";   
# invalid command name "returnAmount"
	   			drinksChoice <= "00";
# invalid command name "drinksChoice"
                end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write

                LED_s40 <= '1';
# invalid command name "LED_s40"
				LED_s20 <= '0'; 
# invalid command name "LED_s20"
				
	   when others => 	DispenseD <= '0'; 
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
		       	        balance <= "0000" ;
# invalid command name "balance"
			        returnAmount <= "0000";   
# invalid command name "returnAmount"
			        drinksChoice <= "00";
# invalid command name "drinksChoice"

 end case;
# bad option "case": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
end process;
# bad option "process": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
--------------------------------------------------------------------------------------------------
# invalid command name "--------------------------------------------------------------------------------------------------"
--Seven segment Display process
# invalid command name "--Seven"

	Refresh: process(Clock ,Reset)
# invalid command name "Refresh:"
	begin 
# invalid command name "begin"
   		if(Reset='1') then         --- reset = 1 does reset all the seven segments except the 6 & 7
# invalid command name "if(Reset='1')"
        		refresh_counter <= (others => '0');
# invalid command name "refresh_counter"
			secDealy <= 0;
# invalid command name "secDealy"
    		elsif(rising_edge(Clock)) then
# invalid command name "elsif(rising_edge(Clock))"
        		refresh_counter <= refresh_counter+1;
# invalid command name "refresh_counter"
			secDealy <= secDealy+1;
# invalid command name "secDealy"
    		end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
	end Process;
# bad option "Process": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
	Led_activation <= Refresh_counter(19 downto 17);
# invalid command name "Led_activation"
	DisplayBCD: process(Led_Activation)
# invalid command name "DisplayBCD:"
	begin 
# invalid command name "begin"
		sw0 <= drinksChoice;
# invalid command name "sw0"
		Case(Led_activation) is           -- Led-activation for anode activation
# invalid command name "Case(Led_activation)"
		when "000" =>
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			An0 <= "01111111";
# invalid command name "An0"
			if(sw0 = "00") then
# extra characters after close-quote
				DataDisp <= "0000";
# invalid command name "DataDisp"
			elsif(sw0 = "01") then
# extra characters after close-quote
				DataDisp <= "1101";
# invalid command name "DataDisp"
			elsif(sw0 = "10") then
# extra characters after close-quote
				DataDisp <= "0101";
# invalid command name "DataDisp"
			elsif(Sw0 = "11") then
# extra characters after close-quote
				DataDisp <= "1101";
# invalid command name "DataDisp"
			else
# invalid command name "else"
				DataDisp <= "0000";
# invalid command name "DataDisp"
			end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
		when "001" =>
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			An0 <= "10111111";
# invalid command name "An0"
			if(Sw0 = "11") then
# extra characters after close-quote
				DataDisp <= "0101";
# invalid command name "DataDisp"
			else
# invalid command name "else"
				DataDisp <= "0000";
# invalid command name "DataDisp"
			end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
		when"010" =>
# invalid command name "when"010""
			An0 <= "11011111";
# invalid command name "An0"
			if(sw0 = "01") then
# extra characters after close-quote
				DataDisp <= "0000";
# invalid command name "DataDisp"
			elsif(sw0 = "10") then
# extra characters after close-quote
				DataDisp <= "0000";
# invalid command name "DataDisp"
			elsif(sw0 = "11") then
# extra characters after close-quote
				DataDisp <= "0001";
# invalid command name "DataDisp"
			else
# invalid command name "else"
				DataDisp <= "0000";
# invalid command name "DataDisp"
			end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
		when "011" =>
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			An0 <= "11101111";
# invalid command name "An0"
			if(sw0 = "01") then
# extra characters after close-quote
				DataDisp <= "0110";
# invalid command name "DataDisp"
			elsif(sw0 = "10") then
# extra characters after close-quote
				DataDisp <= "0100";
# invalid command name "DataDisp"
			else
# invalid command name "else"
				DataDisp <= "0000";
# invalid command name "DataDisp"
			end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
		when "100" =>
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			An0 <= "11110111";
# invalid command name "An0"
			if DispenseD = '1' then
# invalid bareword "DispenseD"
# in expression "DispenseD";
# should be "$DispenseD" or "{DispenseD}" or "DispenseD(...)" or ...
				DataDisp <= "1001"; --change it to Display D
# invalid command name "DataDisp"
			else 
# invalid command name "else"
				DataDisp <= "0111"; --change it to Display N=n
# invalid command name "DataDisp"
			end if;
# bad option "if": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
		when "101" =>
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			An0 <= "11111101";
# invalid command name "An0"
			--if DispenseD = '0' then
# invalid command name "--if"
				DataDisp <= balance;
# invalid command name "DataDisp"
			--else
# invalid command name "--else"
				--DataDisp <= returnAmount;
# invalid command name "--DataDisp"
			--end if;
# invalid command name "--end"

		when others =>
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
			An0 <= "11111110";
# invalid command name "An0"
			DataDisp <= returnAmount;
# invalid command name "DataDisp"

		end case;
# bad option "case": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
	end process;
# bad option "process": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write
	CallDisp: process (DataDisp)
# invalid command name "CallDisp:"
	begin
# invalid command name "begin"
    	case DataDisp is
# extra case pattern with no body
    		when "0000" => Display <= "00000011"; -- "0"     
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0001" => Display <= "10011111"; -- "1" 
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0010" => Display <= "00100101"; -- "2" 
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0011" => Display <= "00001101"; -- "3" 
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0100" => Display <= "10011001"; -- "4" 
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0101" => Display <= "11100001"; -- "t"  CAN CHANGE IT
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0110" => Display <= "01000001"; -- "6" 
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "0111" => Display <= "11010101"; -- "n"  CAN CHANGE IT
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1000" => Display <= "00000001"; -- "8"     
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1001" => Display <= "10000101"; -- "d"  CAN CHANGE IT
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1010" => Display <= "00000010"; -- 0.
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1011" => Display <= "10011110"; -- 1.
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1100" => Display <= "00100100"; -- 2.
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1101" => Display <= "01100011"; -- C
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when "1110" => Display <= "01100001"; -- E
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    		when others => Display <= "01110001"; -- F
# ** UI-Msg: (vish-4000) A design must be loaded before the "when" command can be used.
    	end 	end process;
# bad option "end": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write


end architecture;
# bad option "architecture": must be blank, cget, configure, copy, data, get, put, read, redither, transparency, or write



# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd failed with 2 errors.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMachineV2.vhd failed with 1 errors.
# Compile of VendingMachineV2.vhd was successful.
# Compile of VendingMacgineV3.vhd failed with 3 errors.
# Compile of VendingMacgineV3.vhd was successful.
# Compile of VendingMacgineV3.vhd failed with 3 errors.
# Compile of VendingMacgineV3.vhd was successful.
# Compile of VendingMacgineV3.vhd was successful.
# Compile of VendingMacgineV3.vhd failed with 1 errors.
# Compile of VendingMacgineV3.vhd failed with 2 errors.
# Compile of VendingMacgineV3.vhd was successful.
# Compile of VendingMacgineV3.vhd was successful.
# Compile of VendingMacgineV3.vhd was successful.
